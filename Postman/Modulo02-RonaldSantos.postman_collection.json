{
	"info": {
		"_postman_id": "9ca71f3c-e867-4919-92d8-504c3221b64e",
		"name": "Modulo02-RonaldSantos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4934341",
		"_collection_link": "https://planetary-firefly-372160.postman.co/workspace/Workspace-Galaxy~0f0c0be9-a641-4ff6-8b8c-0fbcd3e35ee3/collection/4934341-9ca71f3c-e867-4919-92d8-504c3221b64e?action=share&source=collection_link&creator=4934341"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    var limit = 400\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limit);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"santosronald\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/users/santosronald",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"users",
								"santosronald"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post user social accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"pm.test(\"Response has the required fields: provider and url\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(account) {",
									"        pm.expect(account).to.have.all.keys('provider', 'url');",
									"        pm.expect(account.provider).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(account.url).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Provider is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(account) {",
									"        pm.expect(account.provider).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Provider should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"URL is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(account) {",
									"        pm.expect(account).to.have.property('url').that.is.a('string').and.to.match(/https?:\\/\\/[^\\s]+/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_urls\": [\r\n        \"https://www.youtube.com/@ronaldsantos3467\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/user/social_accounts",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"social_accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user social accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    var limit = 500\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limit);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields: provider and url\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(account => {\r",
									"        pm.expect(account).to.have.all.keys('https://www.youtube.com/@ronaldsantos3467');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The provider must be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(account) {\r",
									"        pm.expect(account.provider).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Provider should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate that the url is in a valid URL format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(account => {\r",
									"        pm.expect(account).to.have.property('url').that.matches(/^(https?:\\/\\/)/);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/user/social_accounts",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"social_accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user social accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has no content for successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is text/xml\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('Accept-Encoding');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty or null\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_urls\": [\r\n        \"https://www.youtube.com/@ronaldsantos9999\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/user/social_accounts",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"social_accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "repositories",
			"item": [
				{
					"name": "Get repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    var limit = 400\r",
									"    pm.expect(pm.response.responseTime, \"Response time was longer than \" + limit + \" ms.\").to.be.below(limit);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"CURS-000356\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('santosronald-prueba02');",
									"});",
									"",
									"",
									"pm.test(\"Owner object contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.owner).to.exist;",
									"    pm.expect(responseData.owner).to.have.all.keys('santosronald');",
									"});",
									"",
									"",
									"pm.test(\"Permissions object contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.permissions).to.exist;",
									"    const permissions = responseData.permissions;",
									"",
									"    pm.expect(permissions).to.have.all.keys('admin', 'maintain', 'push', 'triage', 'pull');",
									"});",
									"",
									"",
									"pm.test(\"Name must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response content-type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"name\":\"santosronald-prueba02\",\r\n    \"description\":\"Esta es una descripción de prueba\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys(\r",
									"        'id', 'node_id', 'name', 'full_name', 'private', 'owner', 'html_url', \r",
									"        'description', 'fork', 'url', 'created_at', 'updated_at', 'pushed_at', \r",
									"        'size', 'stargazers_count', 'watchers_count', 'has_issues', 'has_projects', \r",
									"        'has_downloads', 'has_wiki', 'has_pages', 'has_discussions', 'forks_count', \r",
									"        'archived', 'disabled', 'open_issues_count', 'license', 'allow_forking', \r",
									"        'is_template', 'web_commit_signoff_required', 'visibility', 'permissions', \r",
									"        'security_and_analysis', 'network_count', 'subscribers_count'\r",
									"    );\r",
									"    \r",
									"    pm.expect(responseData.owner).to.be.an('object').and.to.have.all.keys(\r",
									"        'login', 'id', 'node_id', 'avatar_url', 'gravatar_id', 'url', \r",
									"        'html_url', 'followers_url', 'following_url', 'gists_url', \r",
									"        'starred_url', 'subscriptions_url', 'organizations_url', \r",
									"        'repos_url', 'events_url', 'received_events_url', 'type', \r",
									"        'user_view_type', 'site_admin'\r",
									"    );\r",
									"    \r",
									"    pm.expect(responseData.permissions).to.be.an('object').and.to.have.all.keys(\r",
									"        'admin', 'maintain', 'push', 'triage', 'pull'\r",
									"    );\r",
									"    \r",
									"    pm.expect(responseData.security_and_analysis).to.be.an('object').and.to.have.all.keys(\r",
									"        'secret_scanning', 'secret_scanning_push_protection', \r",
									"        'dependabot_security_updates', 'secret_scanning_non_provider_patterns', \r",
									"        'secret_scanning_validity_checks'\r",
									"    );\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Owner object contains valid fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('owner').that.is.an('object');\r",
									"    const owner = responseData.owner;\r",
									"    \r",
									"    pm.expect(owner).to.have.all.keys('login', 'id', 'node_id', 'avatar_url', 'gravatar_id', 'url', 'html_url', 'followers_url', 'following_url', 'gists_url', 'starred_url', 'subscriptions_url', 'organizations_url', 'repos_url', 'events_url', 'received_events_url', 'type', 'user_view_type', 'site_admin');\r",
									"    \r",
									"    pm.expect(owner.login).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"    pm.expect(owner.id).to.be.a('number');\r",
									"    pm.expect(owner.site_admin).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Permissions object contains expected keys with boolean values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.permissions).to.be.an('object');\r",
									"    const expectedKeys = [\"admin\", \"maintain\", \"push\", \"triage\", \"pull\"];\r",
									"    expectedKeys.forEach(key => {\r",
									"        pm.expect(responseData.permissions).to.have.property(key).that.is.a('boolean');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"repo-prueba-02\",\r\n    \"description\": \"Esta es un repo de prueba\",\r\n    \"homepage\": \"https://github.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/repos/santosronald/santosronald-prueba01",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"santosronald",
								"santosronald-prueba01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty or null\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the deletion was successful by checking if the resource no longer exists\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.sendRequest({\r",
									"        url: 'https://api.github.com/repos/santosronald/repo-prueba-02',\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Accept': 'application/vnd.github.v3+json'\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(res).to.have.status(404);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Request can only be made by authorized users\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.expect(pm.response.json()).to.have.property('message').that.includes('Not authorized');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/santosronald/santosronald-prueba02",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"santosronald",
								"santosronald-prueba02"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "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",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}